const mime = require('mime-types')
const fileType = require('file-type/index')

class Bucket {
  constructor(name, options = {}, connection) {
    if (!name) throw new TypeError('Bucket name must be defined')
    if (!connection) throw new TypeError('Bucket requires a connection')

    this.name = name
    this.options = options
    this.connection = connection
  }

  // validate the configuration bucket
  async validate () {
    let params = { Bucket: this.name }
    try {
      return await this.connection.headBucket(params).promise()
    } catch(e) {
      let message = e.toString().toLowerCase()

      if (message.includes('forbidden')) {
        throw new Error(`Bucket: ${this.name} exists, but you do not have permission to access it.`)

      } else if (message.includes('notfound')) {
        if (this.options.createBucket) {
          console.time(`Bucket: creating bucket ${this.name} ...`)
          await this.createBucket()
          console.timeEnd(`Bucket: creating bucket ${this.name} ...`)
        } else {
          throw new Error(`Bucket: ${this.name} not found.`)
        }

      } else {
        error(`Bucket: ${this.name} could not be validated.`)
        throw new Error(`AWS Error: ${e.toString()}`)
      }
    }
  }

  async createBucket () {
    let params = {
      Bucket: this.name,
      ACL: this.options.acl
    }

    try {
      await this.connection.createBucket(params).promise()
    } catch(e) {
      console.error(`Bucket: ${this.name} could not be created `)
      throw new Error(`AWS Error: ${e.toString()}`)
    }
  }
  uploadFile (fileKey, fileStream, uploadOptions) {
    let uploadParams = {
      Bucket: this.name,
      Body: fileStream,
      Key: fileKey,
      ACL: this.options.acl,
      ContentType: this.contentType(fileKey)
    }

    return this.connection.upload(
      uploadParams,
      { partSize: (5 * 1024 * 1024), queueSize: 4 }
    ).promise()
  }
  // file content type
  contentType (filename, fileStream) {
    return mime.lookup(filename) || fileType(fileStream)
  }
}

module.exports = Bucket
